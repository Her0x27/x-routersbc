#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è –¥–ª—è Go + Echo –ø—Ä–æ–µ–∫—Ç–∞
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./generate_module.sh <project_name> <module_name>

set -e

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
if [ $# -ne 2 ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <project_name> <module_name>"
    echo "–ü—Ä–∏–º–µ—Ä: $0 network-router dashboard"
    exit 1
fi

PROJECT_NAME=$1
MODULE_NAME=$2
MODULE_TITLE=$(echo "$MODULE_NAME" | sed 's/.*/\u&/')

echo "üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è '$MODULE_NAME' –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '$PROJECT_NAME'"

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
mkdir -p handlers
mkdir -p routes
mkdir -p models
mkdir -p services
mkdir -p templates/$MODULE_NAME
mkdir -p static/css/$MODULE_NAME
mkdir -p static/js/$MODULE_NAME
mkdir -p tests/handlers
mkdir -p docs

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞..."
cat > handlers/${MODULE_NAME}_handler.go << EOF
package handlers

import (
	"net/http"
	"github.com/labstack/echo/v4"
)

// ${MODULE_TITLE}Handler —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–¥—É–ª—è $MODULE_NAME
type ${MODULE_TITLE}Handler struct {
	// –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (—Å–µ—Ä–≤–∏—Å—ã, —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏)
}

// New${MODULE_TITLE}Handler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
func New${MODULE_TITLE}Handler() *${MODULE_TITLE}Handler {
	return &${MODULE_TITLE}Handler{}
}

// Index –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–¥—É–ª—è $MODULE_NAME
func (h *${MODULE_TITLE}Handler) Index(c echo.Context) error {
	data := map[string]interface{}{
		"Title":      "$MODULE_TITLE",
		"ModuleName": "$MODULE_NAME",
		"PageTitle":  "$MODULE_TITLE Dashboard",
	}
	
	return c.Render(http.StatusOK, "${MODULE_NAME}/index.html", data)
}

// GetData –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON (API endpoint)
func (h *${MODULE_TITLE}Handler) GetData(c echo.Context) error {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
	data := map[string]interface{}{
		"status": "success",
		"module": "$MODULE_NAME",
		"data":   []interface{}{},
	}
	
	return c.JSON(http.StatusOK, data)
}

// Update –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è
func (h *${MODULE_TITLE}Handler) Update(c echo.Context) error {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
	return c.JSON(http.StatusOK, map[string]string{
		"status":  "success",
		"message": "$MODULE_TITLE settings updated successfully",
	})
}
EOF

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
echo "üõ£Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤..."
cat > routes/${MODULE_NAME}_routes.go << EOF
package routes

import (
	"${PROJECT_NAME}/handlers"
	"github.com/labstack/echo/v4"
)

// Register${MODULE_TITLE}Routes —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è $MODULE_NAME
func Register${MODULE_TITLE}Routes(e *echo.Echo) {
	handler := handlers.New${MODULE_TITLE}Handler()
	
	// –ì—Ä—É–ø–ø–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –º–æ–¥—É–ª—è
	${MODULE_NAME}Group := e.Group("/$MODULE_NAME")
	
	// HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	${MODULE_NAME}Group.GET("", handler.Index)
	${MODULE_NAME}Group.GET("/", handler.Index)
	
	// API endpoints
	api := ${MODULE_NAME}Group.Group("/api")
	api.GET("/data", handler.GetData)
	api.POST("/update", handler.Update)
	api.PUT("/settings", handler.Update)
}
EOF

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
echo "üìä –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏..."
cat > models/${MODULE_NAME}_model.go << EOF
package models

import (
	"time"
)

// ${MODULE_TITLE}Config —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è $MODULE_NAME
type ${MODULE_TITLE}Config struct {
	ID        int       \`json:"id"\`
	Name      string    \`json:"name"\`
	Enabled   bool      \`json:"enabled"\`
	Settings  map[string]interface{} \`json:"settings"\`
	CreatedAt time.Time \`json:"created_at"\`
	UpdatedAt time.Time \`json:"updated_at"\`
}

// ${MODULE_TITLE}Status —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥—É–ª—è
type ${MODULE_TITLE}Status struct {
	Module    string \`json:"module"\`
	Status    string \`json:"status"\`
	Uptime    int64  \`json:"uptime"\`
	LastCheck time.Time \`json:"last_check"\`
}

// ${MODULE_TITLE}Data –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª—è
type ${MODULE_TITLE}Data struct {
	Config *${MODULE_TITLE}Config \`json:"config"\`
	Status *${MODULE_TITLE}Status \`json:"status"\`
	Metrics map[string]interface{} \`json:"metrics"\`
}

// Validate –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è
func (d *${MODULE_TITLE}Data) Validate() error {
	// TODO: –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é
	return nil
}
EOF

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
echo "‚öôÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞..."
cat > services/${MODULE_NAME}_service.go << EOF
package services

import (
	"${PROJECT_NAME}/models"
	"fmt"
)

// ${MODULE_TITLE}Service —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥—É–ª–µ–º $MODULE_NAME
type ${MODULE_TITLE}Service struct {
	// –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
}

// New${MODULE_TITLE}Service —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
func New${MODULE_TITLE}Service() *${MODULE_TITLE}Service {
	return &${MODULE_TITLE}Service{}
}

// GetData –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è
func (s *${MODULE_TITLE}Service) GetData() (*models.${MODULE_TITLE}Data, error) {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
	config := &models.${MODULE_TITLE}Config{
		ID:      1,
		Name:    "$MODULE_NAME",
		Enabled: true,
		Settings: make(map[string]interface{}),
	}
	
	status := &models.${MODULE_TITLE}Status{
		Module: "$MODULE_NAME",
		Status: "active",
		Uptime: 0,
	}
	
	data := &models.${MODULE_TITLE}Data{
		Config:  config,
		Status:  status,
		Metrics: make(map[string]interface{}),
	}
	
	return data, nil
}

// UpdateConfig –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è
func (s *${MODULE_TITLE}Service) UpdateConfig(config *models.${MODULE_TITLE}Config) error {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	if err := config.Validate(); err != nil {
		return fmt.Errorf("validation failed: %w", err)
	}
	
	return nil
}

// GetStatus –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è
func (s *${MODULE_TITLE}Service) GetStatus() (*models.${MODULE_TITLE}Status, error) {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
	status := &models.${MODULE_TITLE}Status{
		Module: "$MODULE_NAME",
		Status: "active",
		Uptime: 0,
	}
	
	return status, nil
}
EOF

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —à–∞–±–ª–æ–Ω–∞
echo "üé® –°–æ–∑–¥–∞–Ω–∏–µ HTML —à–∞–±–ª–æ–Ω–∞..."
cat > templates/$MODULE_NAME/index.html << EOF
{{define "content_${MODULE_NAME}"}}
<div class="page-wrapper">
    <!-- Page header -->
    <div class="page-header d-print-none">
        <div class="container-xl">
            <div class="row g-2 align-items-center">
                <div class="col">
                    <div class="page-pretitle">
                        Module
                    </div>
                    <h2 class="page-title">
                        {{.PageTitle}}
                    </h2>
                </div>
                <div class="col-auto ms-auto d-print-none">
                    <div class="btn-list">
                        <button type="button" class="btn btn-primary" onclick="${MODULE_NAME}Module.refresh()">
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                <path d="M20 11a8.1 8.1 0 0 0 -15.5 -2m-.5 -4v4h4"/>
                                <path d="M4 13a8.1 8.1 0 0 0 15.5 2m.5 4v-4h-4"/>
                            </svg>
                            Refresh
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Page body -->
    <div class="page-body">
        <div class="container-xl">
            <div class="row row-deck row-cards">
                <!-- Status Card -->
                <div class="col-12 col-md-6 col-lg-4">
                    <div class="card">
                        <div class="card-body">
                            <div class="d-flex align-items-center">
                                <div class="subheader">Status</div>
                                <div class="ms-auto">
                                    <div class="status status-green" id="${MODULE_NAME}-status"></div>
                                </div>
                            </div>
                            <div class="h1 mb-3" id="${MODULE_NAME}-status-text">Active</div>
                            <div class="d-flex mb-2">
                                <div>Uptime</div>
                                <div class="ms-auto">
                                    <span class="text-green d-inline-flex align-items-center lh-1" id="${MODULE_NAME}-uptime">
                                        0s
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Configuration Card -->
                <div class="col-12 col-md-6 col-lg-8">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Configuration</h3>
                        </div>
                        <div class="card-body">
                            <form id="${MODULE_NAME}-config-form">
                                <div class="mb-3">
                                    <label class="form-label">Module Name</label>
                                    <input type="text" class="form-control" name="name" value="{{.ModuleName}}" readonly>
                                </div>
                                <div class="mb-3">
                                    <label class="form-check">
                                        <input type="checkbox" class="form-check-input" name="enabled" checked>
                                        <span class="form-check-label">Enable Module</span>
                                    </label>
                                </div>
                                <div class="form-footer">
                                    <button type="submit" class="btn btn-primary">Save Configuration</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>

                <!-- Data Table -->
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">{{.Title}} Data</h3>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-vcenter card-table" id="${MODULE_NAME}-data-table">
                                    <thead>
                                        <tr>
                                            <th>Parameter</th>
                                            <th>Value</th>
                                            <th>Status</th>
                                            <th class="w-1">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td colspan="4" class="text-center text-muted">
                                                Loading data...
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª—å–Ω–æ–≥–æ CSS –∏ JS -->
<link rel="stylesheet" href="/static/css/{{.ModuleName}}/{{.ModuleName}}.css">
<script src="/static/js/{{.ModuleName}}/{{.ModuleName}}.js"></script>
{{end}}
EOF

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSS
echo "üé® –°–æ–∑–¥–∞–Ω–∏–µ CSS —Å—Ç–∏–ª–µ–π..."
cat > static/css/$MODULE_NAME/${MODULE_NAME}.css << EOF
/* –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥—É–ª—è $MODULE_NAME */
/* –ò—Å–ø–æ–ª—å–∑—É–µ–º Tabler.io –∫–∞–∫ –æ—Å–Ω–æ–≤—É */

.${MODULE_NAME}-module {
    /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –º–æ–¥—É–ª—è */
}

.${MODULE_NAME}-status-card {
    transition: all 0.3s ease;
}

.${MODULE_NAME}-status-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.${MODULE_NAME}-data-table {
    /* –°—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö */
}

.${MODULE_NAME}-config-form {
    /* –°—Ç–∏–ª–∏ –¥–ª—è —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ */
}

/* –ê–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ */
.${MODULE_NAME}-loading {
    opacity: 0.6;
    pointer-events: none;
}

.${MODULE_NAME}-loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    margin: -10px 0 0 -10px;
    border: 2px solid #f3f3f3;
    border-top: 2px solid #3498db;
    border-radius: 50%;
    animation: ${MODULE_NAME}-spin 1s linear infinite;
}

@keyframes ${MODULE_NAME}-spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Responsive —Å—Ç–∏–ª–∏ */
@media (max-width: 768px) {
    .${MODULE_NAME}-module .card {
        margin-bottom: 1rem;
    }
}
EOF
